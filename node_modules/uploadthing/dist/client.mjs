import {
  maybeParseResponseXML
} from "./chunk-5KWT532U.mjs";
import "./chunk-T2XS27LC.mjs";

// src/client.ts
import {
  pollForFileData,
  safeParseJSON,
  UploadThingError
} from "@uploadthing/shared";

// src/internal/component-theming.ts
import { objectKeys } from "@uploadthing/shared";
var generatePermittedFileTypes = (config) => {
  const fileTypes = config ? objectKeys(config) : [];
  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];
  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };
};
var capitalizeStart = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var INTERNAL_doFormatting = (config) => {
  if (!config)
    return "";
  const allowedTypes = objectKeys(config);
  const formattedTypes = allowedTypes.map((f) => f === "blob" ? "file" : f);
  if (formattedTypes.length > 1) {
    const lastType = formattedTypes.pop();
    return `${formattedTypes.join("s, ")} and ${lastType}s`;
  }
  const key = allowedTypes[0];
  const formattedKey = formattedTypes[0];
  const { maxFileSize, maxFileCount } = config[key];
  if (maxFileCount && maxFileCount > 1) {
    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;
  } else {
    return `${formattedKey} (${maxFileSize})`;
  }
};
var allowedContentTextLabelGenerator = (config) => {
  return capitalizeStart(INTERNAL_doFormatting(config));
};
var styleFieldToClassName = (styleField, args) => {
  if (typeof styleField === "string")
    return styleField;
  if (typeof styleField === "function") {
    const result = styleField(args);
    if (typeof result === "string")
      return result;
  }
  return "";
};
var styleFieldToCssObject = (styleField, args) => {
  if (typeof styleField === "object")
    return styleField;
  if (typeof styleField === "function") {
    const result = styleField(args);
    if (typeof result === "object")
      return result;
  }
  return {};
};
var contentFieldToContent = (contentField, arg) => {
  if (!contentField)
    return null;
  if (typeof contentField !== "function")
    return contentField;
  if (typeof contentField === "function") {
    const result = contentField(arg);
    return result;
  }
};

// src/client.ts
function fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {
  return new Promise((res, rej) => {
    const xhr = new XMLHttpRequest();
    xhr.open(opts.method ?? "get", url);
    opts.headers && Object.keys(opts.headers).forEach(
      (h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? "")
    );
    xhr.onload = (e) => {
      res(e.target);
    };
    xhr.onerror = rej;
    if (xhr.upload && onProgress)
      xhr.upload.onprogress = onProgress;
    if (xhr.upload && onUploadBegin)
      xhr.upload.onloadstart = onUploadBegin;
    xhr.send(opts.body);
  });
}
var createAPIRequestUrl = (config) => {
  const url = new URL(
    config.url ?? `${window.location.origin}/api/uploadthing`
  );
  const queryParams = new URLSearchParams(url.search);
  queryParams.set("actionType", config.actionType);
  queryParams.set("slug", config.slug);
  url.search = queryParams.toString();
  return url.toString();
};
var DANGEROUS__uploadFiles = async (opts, config) => {
  const s3ConnectionRes = await fetch(
    createAPIRequestUrl({
      url: config == null ? void 0 : config.url,
      slug: String(opts.endpoint),
      actionType: "upload"
    }),
    {
      method: "POST",
      body: JSON.stringify({
        files: opts.files.map((f) => f.name),
        input: opts.input
      }),
      // Express requires Content-Type to be explicitly set to parse body properly
      headers: {
        "Content-Type": "application/json"
      }
    }
  ).then(async (res) => {
    if (!res.ok) {
      const error = await UploadThingError.fromResponse(res);
      throw error;
    }
    const jsonOrError = await safeParseJSON(res);
    if (jsonOrError instanceof Error) {
      throw new UploadThingError({
        code: "BAD_REQUEST",
        message: jsonOrError.message,
        cause: res
      });
    }
    return jsonOrError;
  });
  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {
    throw new UploadThingError({
      code: "BAD_REQUEST",
      message: "No URL. How did you even get here?",
      cause: s3ConnectionRes
    });
  }
  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {
    const file = opts.files.find((f) => f.name === presigned.name);
    if (!file) {
      console.error("No file found for presigned URL", presigned);
      throw new UploadThingError({
        code: "NOT_FOUND",
        message: "No file found for presigned URL",
        cause: `Expected file with name ${presigned.name} but got '${opts.files.join(",")}'`
      });
    }
    const { url, fields } = presigned.presignedUrl;
    const formData = new FormData();
    if (presigned.fileType === file.type.split("/")[0] || presigned.fileType === file.type) {
      formData.append("Content-Type", file.type);
    } else if (presigned.fileType === "blob") {
      formData.append("Content-Type", "application/octet-stream");
    } else if (presigned.fileType === "pdf") {
      formData.append("Content-Type", "application/pdf");
    }
    Object.entries({ ...fields, file }).forEach(([key, value]) => {
      formData.append(key, value);
    });
    const upload = await fetchWithProgress(
      url,
      {
        method: "POST",
        body: formData,
        headers: new Headers({
          Accept: "application/xml"
        })
      },
      (progressEvent) => {
        var _a;
        return (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {
          file: file.name,
          progress: progressEvent.loaded / progressEvent.total * 100
        });
      },
      () => {
        var _a;
        (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, {
          file: file.name
        });
      }
    );
    if (upload.status > 299 || upload.status < 200) {
      await fetch(
        createAPIRequestUrl({
          url: config == null ? void 0 : config.url,
          slug: String(opts.endpoint),
          actionType: "failure"
        }),
        {
          method: "POST",
          body: JSON.stringify({
            fileKey: fields.key
          })
        }
      );
      const parsed = maybeParseResponseXML(upload.responseText);
      if (parsed == null ? void 0 : parsed.message) {
        throw new UploadThingError({
          code: parsed.code,
          message: parsed.message
        });
      } else {
        throw new UploadThingError({
          code: "UPLOAD_FAILED",
          message: `Failed to upload file ${file.name} to S3`,
          cause: upload.responseText
        });
      }
    }
    const genUrl = "https://utfs.io/f/" + encodeURIComponent(fields.key);
    await pollForFileData(presigned.key);
    const ret = {
      fileName: file.name,
      name: file.name,
      fileSize: file.size,
      size: file.size,
      fileKey: presigned.key,
      key: presigned.key,
      fileUrl: genUrl,
      url: genUrl
    };
    return ret;
  });
  return Promise.all(fileUploadPromises);
};
var genUploader = () => {
  return DANGEROUS__uploadFiles;
};
var classNames = (...classes) => {
  return classes.filter(Boolean).join(" ");
};
var generateMimeTypes = (fileTypes) => {
  const accepted = fileTypes.map((type) => {
    if (type === "blob")
      return "blob";
    if (type === "pdf")
      return "application/pdf";
    if (type.includes("/"))
      return type;
    else
      return `${type}/*`;
  });
  if (accepted.includes("blob")) {
    return void 0;
  }
  return accepted;
};
var generateClientDropzoneAccept = (fileTypes) => {
  const mimeTypes = generateMimeTypes(fileTypes);
  if (!mimeTypes)
    return void 0;
  return Object.fromEntries(mimeTypes.map((type) => [type, []]));
};
export {
  DANGEROUS__uploadFiles,
  INTERNAL_doFormatting,
  allowedContentTextLabelGenerator,
  capitalizeStart,
  classNames,
  contentFieldToContent,
  genUploader,
  generateClientDropzoneAccept,
  generateMimeTypes,
  generatePermittedFileTypes,
  styleFieldToClassName,
  styleFieldToCssObject
};
//# sourceMappingURL=client.mjs.map