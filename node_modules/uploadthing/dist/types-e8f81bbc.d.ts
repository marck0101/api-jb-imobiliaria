import { Json, FileRouterInputConfig, UploadThingError, UploadedFile } from '@uploadthing/shared';

type ParseFn<TType> = (input: unknown) => MaybePromise<TType>;
type ParserZodEsque<TInput, TParsedInput extends Json> = {
    _input: TInput;
    _output: TParsedInput;
    parse: ParseFn<TParsedInput>;
};
type JsonParser = ParserZodEsque<Json, Json>;

declare const unsetMarker: "unsetMarker" & {
    __brand: "unsetMarker";
};
type UnsetMarker = typeof unsetMarker;
type Simplify<TType> = {
    [TKey in keyof TType]: TType[TKey];
} & {};
type MaybePromise<TType> = TType | Promise<TType>;
type ResolverOptions<TParams extends AnyParams> = {
    metadata: Simplify<TParams["_metadata"] extends UnsetMarker ? undefined : TParams["_metadata"]>;
    file: UploadedFile;
};
type AnyRuntime = "app" | "pages" | "web" | "express" | "fastify" | "h3";
type MiddlewareFnArgs<TRequest, TResponse, TEvent> = {
    req: TRequest;
    res: TResponse;
    event: TEvent;
};
interface AnyParams {
    _input: any;
    _metadata: any;
    _middlewareArgs: MiddlewareFnArgs<any, any, any>;
    _errorShape: any;
    _errorFn: any;
}
type MiddlewareFn<TInput extends JSON | UnsetMarker, TOutput extends Record<string, unknown>, TArgs extends MiddlewareFnArgs<any, any, any>> = (opts: TArgs & (TInput extends UnsetMarker ? {} : {
    input: TInput;
})) => MaybePromise<TOutput>;
type ResolverFn<TParams extends AnyParams> = (opts: ResolverOptions<TParams>) => MaybePromise<void>;
type UploadErrorFn = (input: {
    error: UploadThingError;
    fileKey: string;
}) => void;
type ErrorMessage<TError extends string> = TError;
interface UploadBuilder<TParams extends AnyParams> {
    input: <TParser extends JsonParser>(parser: TParams["_input"] extends UnsetMarker ? TParser : ErrorMessage<"input is already set">) => UploadBuilder<{
        _input: TParser["_output"];
        _metadata: TParams["_metadata"];
        _middlewareArgs: TParams["_middlewareArgs"];
        _errorShape: TParams["_errorShape"];
        _errorFn: TParams["_errorFn"];
    }>;
    middleware: <TOutput extends Record<string, unknown>>(fn: TParams["_metadata"] extends UnsetMarker ? MiddlewareFn<TParams["_input"], TOutput, TParams["_middlewareArgs"]> : ErrorMessage<"middleware is already set">) => UploadBuilder<{
        _input: TParams["_input"];
        _metadata: TOutput;
        _middlewareArgs: TParams["_middlewareArgs"];
        _errorShape: TParams["_errorShape"];
        _errorFn: TParams["_errorFn"];
    }>;
    onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;
    onUploadError: (fn: TParams["_errorFn"] extends UnsetMarker ? UploadErrorFn : ErrorMessage<"onUploadError is already set">) => UploadBuilder<{
        _input: TParams["_input"];
        _metadata: TParams["_metadata"];
        _middlewareArgs: TParams["_middlewareArgs"];
        _errorShape: TParams["_errorShape"];
        _errorFn: UploadErrorFn;
    }>;
}
type UploadBuilderDef<TParams extends AnyParams> = {
    routerConfig: FileRouterInputConfig;
    inputParser: JsonParser;
    middleware: MiddlewareFn<TParams["_input"], {}, TParams["_middlewareArgs"]>;
    errorFormatter: (err: UploadThingError) => TParams["_errorShape"];
    onUploadError: UploadErrorFn;
};
interface Uploader<TParams extends AnyParams> {
    _def: TParams & UploadBuilderDef<TParams>;
    resolver: ResolverFn<TParams>;
}
type FileRouter<TParams extends AnyParams = AnyParams> = Record<string, Uploader<TParams>>;
type inferEndpointInput<TUploader extends Uploader<any>> = TUploader["_def"]["_input"] extends UnsetMarker ? undefined : TUploader["_def"]["_input"];
type inferErrorShape<TRouter extends FileRouter> = TRouter[keyof TRouter]["_def"]["_errorShape"];
declare const VALID_ACTION_TYPES: readonly ["upload", "failure"];
type ActionType = (typeof VALID_ACTION_TYPES)[number];

export { AnyRuntime as A, ErrorMessage as E, FileRouter as F, MaybePromise as M, Simplify as S, UploadBuilder as U, VALID_ACTION_TYPES as V, UnsetMarker as a, MiddlewareFnArgs as b, AnyParams as c, UploadBuilderDef as d, Uploader as e, inferErrorShape as f, ActionType as g, inferEndpointInput as i, unsetMarker as u };
