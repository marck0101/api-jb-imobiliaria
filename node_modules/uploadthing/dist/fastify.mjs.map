{"version":3,"sources":["../src/fastify.ts"],"sourcesContent":["import type {\n  FastifyInstance,\n  FastifyReply,\n  FastifyRequest,\n  RouteHandlerMethod,\n} from \"fastify\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport type { FileRouter } from \"./internal/types\";\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) =>\n  createBuilder<\n    { req: FastifyRequest; res: FastifyReply; event: undefined },\n    TErrorShape\n  >(opts);\n\nexport const fastifyUploadthingPlugin = <TRouter extends FileRouter>(\n  fastify: FastifyInstance,\n  opts: RouterWithConfig<TRouter>,\n  done: (err?: Error) => void,\n) => {\n  incompatibleNodeGuard();\n  const requestHandler = buildRequestHandler<TRouter>(opts);\n\n  const POST: RouteHandlerMethod = async (req, res) => {\n    const response = await requestHandler({\n      req: Object.assign(req, {\n        json: () => Promise.resolve(req.body),\n      }),\n      res,\n    });\n\n    if (response instanceof UploadThingError) {\n      void res\n        .status(getStatusCodeFromError(response))\n        .headers({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        })\n        .send(formatError(response, opts.router));\n      return;\n    }\n\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      void res\n        .status(500)\n        .headers({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        })\n        .send(\"An unknown error occured\");\n      return;\n    }\n\n    void res\n      .status(response.status)\n      .headers({\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      })\n      .send(response.body);\n  };\n\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  const GET: RouteHandlerMethod = (_, res) => {\n    void res\n      .status(200)\n      .headers({\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      })\n      .send(getBuildPerms());\n  };\n\n  fastify.post(\"/api/uploadthing\", POST).get(\"/api/uploadthing\", GET);\n\n  done();\n};\n"],"mappings":";;;;;;;;;;;;;AAQA,SAAS,wBAAwB,wBAAwB;AAgBlD,IAAM,oBAAoB,CAC/B,SAEA,cAGE,IAAI;AAED,IAAM,2BAA2B,CACtC,SACA,MACA,SACG;AACH,wBAAsB;AACtB,QAAM,iBAAiB,oBAA6B,IAAI;AAExD,QAAM,OAA2B,OAAO,KAAK,QAAQ;AACnD,UAAM,WAAW,MAAM,eAAe;AAAA,MACpC,KAAK,OAAO,OAAO,KAAK;AAAA,QACtB,MAAM,MAAM,QAAQ,QAAQ,IAAI,IAAI;AAAA,MACtC,CAAC;AAAA,MACD;AAAA,IACF,CAAC;AAED,QAAI,oBAAoB,kBAAkB;AACxC,WAAK,IACF,OAAO,uBAAuB,QAAQ,CAAC,EACvC,QAAQ;AAAA,QACP,yBAAyB;AAAA,MAC3B,CAAC,EACA,KAAK,YAAY,UAAU,KAAK,MAAM,CAAC;AAC1C;AAAA,IACF;AAEA,QAAI,SAAS,WAAW,KAAK;AAE3B,WAAK,IACF,OAAO,GAAG,EACV,QAAQ;AAAA,QACP,yBAAyB;AAAA,MAC3B,CAAC,EACA,KAAK,0BAA0B;AAClC;AAAA,IACF;AAEA,SAAK,IACF,OAAO,SAAS,MAAM,EACtB,QAAQ;AAAA,MACP,yBAAyB;AAAA,IAC3B,CAAC,EACA,KAAK,SAAS,IAAI;AAAA,EACvB;AAEA,QAAM,gBAAgB,4BAAqC,IAAI;AAE/D,QAAM,MAA0B,CAAC,GAAG,QAAQ;AAC1C,SAAK,IACF,OAAO,GAAG,EACV,QAAQ;AAAA,MACP,yBAAyB;AAAA,IAC3B,CAAC,EACA,KAAK,cAAc,CAAC;AAAA,EACzB;AAEA,UAAQ,KAAK,oBAAoB,IAAI,EAAE,IAAI,oBAAoB,GAAG;AAElE,OAAK;AACP;","names":[]}